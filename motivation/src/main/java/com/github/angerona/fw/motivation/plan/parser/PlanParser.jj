options{  STATIC = false;}PARSER_BEGIN(PlanParser)package com.github.angerona.fw.motivation.plan.parser;import java.util.Collection;import java.util.HashMap;import java.util.LinkedList;import java.util.Map;import com.github.angerona.fw.motivation.plan.dto.ActionDTO;import com.github.angerona.fw.motivation.plan.dto.PlanDTO;import com.github.angerona.fw.motivation.plan.dto.SequenceDTO;import com.github.angerona.fw.motivation.plan.dto.TrailDTO;public class PlanParser{  public static void main(String [] args) throws ParseException, TokenMgrError  {    new PlanParser(System.in);  }}PARSER_END(PlanParser)SKIP :{  " "| "\t"| "\n"| "\r"| "\r\n"}TOKEN :{  < KEYWORD :    ("-")? [ "a"-"z", "A"-"Z", "_" ] ([ "a"-"z", "A"-"Z", "_", "0"-"9" ])*    (      "," ("-")? [ "a"-"z", "A"-"Z", "_" ] ([ "a"-"z", "A"-"Z", "_", "0"-"9" ])*    )* >}TOKEN :{  < SEQSO : "<sequences>" >}TOKEN :{  < SEQSC : "</sequences>" >}TOKEN :{  < SEQO : "<sequence>" >}TOKEN :{  < SEQC : "</sequence>" >}TOKEN :{  < IDO : "<id>" >}TOKEN :{  < IDC : "</id>" >}TOKEN :{  < ACTO : "<action>" >}TOKEN :{  < ACTC : "</action>" >}TOKEN :{  < TRLSO : "<trails>" >}TOKEN :{  < TRLSC : "</trails>" >}TOKEN :{  < TRLO : "<trail>" >}TOKEN :{  < TRLC : "</trail>" >}TOKEN :{  < DESO : "<desire>" >}TOKEN :{  < DESC : "</desire>" >}TOKEN :{  < CNDO : "<condition>" >}TOKEN :{  < CNDC : "</condition>" >}TOKEN :{  < SRCO : "<src>" >}TOKEN :{  < SRCC : "</src>" >}TOKEN :{  < DSTO : "<dst>" >}TOKEN :{  < DSTC : "</dst>" >}ActionDTO readAction() :{  ActionDTO dto = new ActionDTO();  Token t;}{  < IDO > t = < KEYWORD >  {    dto.setId(t.image);  }  < IDC >  (    < CNDO > t = < KEYWORD >    {      dto.setCond(t.image);    }    < CNDC >  )?  < SRCO > t = < KEYWORD >  {    dto.setSrc(t.image);  }  < SRCC >  (    < DSTO > t = < KEYWORD >    {      dto.setDst(t.image);    }    < DSTC >  )?  {    return dto;  }}SequenceDTO readSequence() :{  SequenceDTO seq = new SequenceDTO();  Collection < ActionDTO > act = new LinkedList < ActionDTO > ();  Token t;}{  < IDO > t = < KEYWORD >  {    seq.setId(t.image);  }  < IDC >  (    < ACTO >    {      act.add(readAction());    }    < ACTC >  )*  {    seq.setAct(act);    return seq;  }}TrailDTO readTrail(Map < String, SequenceDTO > seq) :{  TrailDTO trl = new TrailDTO();  Collection < PlanDTO > pln = new LinkedList < PlanDTO > ();  Token t;}{  < DESO > t = < KEYWORD >  {    trl.setDes(t.image);  }  < DESC >  (    < ACTO >    {      pln.add(readAction());    }    < ACTC >  )*  (    < SEQO > t = < KEYWORD >    {      pln.add(seq.get(t.image));    }    < SEQC >  )*  {    trl.setPln(pln);    return trl;  }}Collection < TrailDTO > gatherPlans() :{  Map < String, SequenceDTO > sequences = new HashMap < String, SequenceDTO > ();  Collection < TrailDTO > trails = new LinkedList < TrailDTO > ();  SequenceDTO seq;}{  (    < SEQSO >    (      < SEQO >      {        seq = readSequence();        sequences.put(seq.getId(), seq);      }      < SEQC >    )*    < SEQSC > < TRLSO >    (      < TRLO >      {        trails.add(readTrail(sequences));      }      < TRLC >    )*    < TRLSC >  )?  < EOF >  {    return trails;  }}