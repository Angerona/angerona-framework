/* Generated By:JavaCC: Do not edit this line. MotivationParser.java */
package com.github.angerona.fw.motivation.parser;
import static com.github.angerona.fw.motivation.utils.FormulaUtils.createDesire;
import static com.github.angerona.fw.motivation.utils.FormulaUtils.createFormula;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import net.sf.tweety.logics.fol.syntax.FolFormula;
import com.github.angerona.fw.Desire;
import com.github.angerona.fw.motivation.Maslow;
import com.github.angerona.fw.motivation.model.Motive;
import com.github.angerona.fw.motivation.model.MotiveCoupling;
import com.github.angerona.fw.motivation.model.WeightRange;
import com.github.angerona.fw.util.Pair;

public class MotivationParser implements MotivationParserConstants {
  public static void main(String [] args) throws ParseException, TokenMgrError
  {
    new MotivationParser(System.in);
  }

  final public Pair < Double, Double > readNumPair() throws ParseException {
  Double fst;
  Double snd;
    jj_consume_token(OPEN);
    fst = readNumber();
    jj_consume_token(KOMMA);
    snd = readNumber();
    jj_consume_token(CLOSE);
    {if (true) return new Pair < Double, Double > (fst, snd);}
    throw new Error("Missing return statement in function");
  }

  final public Pair < String, String > readKeyPair() throws ParseException {
  String fst;
  String snd;
    jj_consume_token(OPEN);
    fst = readKeyword();
    jj_consume_token(KOMMA);
    snd = readKeyword();
    jj_consume_token(CLOSE);
    {if (true) return new Pair < String, String > (fst, snd);}
    throw new Error("Missing return statement in function");
  }

  final public Double readNumber() throws ParseException {
  Token t;
    t = jj_consume_token(NUMBER);
    {if (true) return Double.parseDouble(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public String readKeyword() throws ParseException {
  Token t;
    t = jj_consume_token(KEYWORD);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public Set < MotiveCoupling < Maslow, FolFormula >> gatherCouplings() throws ParseException {
  Set < MotiveCoupling < Maslow, FolFormula >> set = new HashSet < MotiveCoupling < Maslow, FolFormula >> ();
  Motive < Maslow > m;
  Desire d;
  Double cs;
  FolFormula f;
  String str;
  boolean negation;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(OPAR);
      m = readMotive();
      jj_consume_token(DIV);
      d = createDesire(readFormula());
      jj_consume_token(DIV);
      cs = readNumber();
      jj_consume_token(DIV);
      f = createFormula(readFormula());
      jj_consume_token(CPAR);
      set.add(new MotiveCoupling < Maslow, FolFormula > (m, d, cs, f));
      jj_consume_token(DIV);
    }
    jj_consume_token(0);
    {if (true) return set;}
    throw new Error("Missing return statement in function");
  }

  final public Motive < Maslow > readMotive() throws ParseException {
  Pair < String, String > pair;
    pair = readKeyPair();
    {if (true) return new Motive < Maslow > (pair.first, Maslow.valueOf(pair.second));}
    throw new Error("Missing return statement in function");
  }

  final public String readFormula() throws ParseException {
  Token neg = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEG:
      neg = jj_consume_token(NEG);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    {if (true) return (neg != null ? neg.image : "") + readKeyword();}
    throw new Error("Missing return statement in function");
  }

  final public Map < Maslow, WeightRange > gatherRanges() throws ParseException {
  Map < Maslow, WeightRange > map = new HashMap < Maslow, WeightRange > ();
  Maslow level;
  WeightRange range;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPAR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(OPAR);
      level = Maslow.valueOf(readKeyword());
      jj_consume_token(DIV);
      range = readRange();
      jj_consume_token(CPAR);
      jj_consume_token(DIV);
      map.put(level, range);
    }
    jj_consume_token(0);
    {if (true) return map;}
    throw new Error("Missing return statement in function");
  }

  final public WeightRange readRange() throws ParseException {
  Pair < Double, Double > pair;
    pair = readNumPair();
    {if (true) return new WeightRange(pair.first, pair.second);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public MotivationParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000,0x100,0x1000,};
   }

  /** Constructor with InputStream. */
  public MotivationParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MotivationParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MotivationParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MotivationParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MotivationParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MotivationParser(MotivationParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MotivationParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[15];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
