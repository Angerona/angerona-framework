options{  STATIC = false;}PARSER_BEGIN(PlanParser)package com.github.angerona.fw.motivation.plans.parser;import java.util.Collection;import java.util.HashMap;import java.util.LinkedList;import java.util.Map;import com.github.angerona.fw.motivation.plans.dto.ActionDTO;import com.github.angerona.fw.motivation.plans.dto.TrailDTO;public class PlanParser{  public static void main(String [] args) throws ParseException, TokenMgrError  {    new PlanParser(System.in);  }}PARSER_END(PlanParser)SKIP :{  " "| "\t"| "\n"| "\r"| "\r\n"}TOKEN :{  < KEYWORD :    ("-")? [ "a"-"z", "A"-"Z", "_" ] ([ "a"-"z", "A"-"Z", "_", "0"-"9" ])*    (      "," ("-")? [ "a"-"z", "A"-"Z", "_" ] ([ "a"-"z", "A"-"Z", "_", "0"-"9" ])*    )* >}TOKEN :{  < IDO : "<id>" >}TOKEN :{  < IDC : "</id>" >}TOKEN :{  < ACTO : "<action>" >}TOKEN :{  < ACTC : "</action>" >}TOKEN :{  < TRLSO : "<trails>" >}TOKEN :{  < TRLSC : "</trails>" >}TOKEN :{  < TRLO : "<trail>" >}TOKEN :{  < TRLC : "</trail>" >}TOKEN :{  < DESO : "<desire>" >}TOKEN :{  < DESC : "</desire>" >}TOKEN :{  < CNDO : "<cond>" >}TOKEN :{  < CNDC : "</cond>" >}TOKEN :{  < SRCO : "<src>" >}TOKEN :{  < SRCC : "</src>" >}TOKEN :{  < DSTO : "<dst>" >}TOKEN :{  < DSTC : "</dst>" >}TOKEN :{  < FINO : "<fin>" >}TOKEN :{  < FINC : "</fin>" >}ActionDTO readAction() :{  ActionDTO dto = new ActionDTO();  Token t;}{  < IDO > t = < KEYWORD >  {    dto.setId(t.image);  }  < IDC >  (    < CNDO > t = < KEYWORD >    {      dto.setCond(t.image);    }    < CNDC >  )?  < SRCO > t = < KEYWORD >  {    dto.setSrc(t.image);  }  < SRCC >  (    < DSTO > t = < KEYWORD >    {      dto.setDst(t.image);    }    < DSTC >  )?  (    < FINO > t = < KEYWORD >    {      dto.setDst(t.image);    }    < FINC >  )?    {    return dto;  }}TrailDTO readTrail() :{  TrailDTO trl = new TrailDTO();  Collection < ActionDTO > pln = new LinkedList < ActionDTO > ();  Token t;}{  < DESO > t = < KEYWORD >  {    trl.setDes(t.image);  }  < DESC >  (    < ACTO >    {      pln.add(readAction());    }    < ACTC >  )*  {    trl.setPln(pln);    return trl;  }}Collection < TrailDTO > gatherPlans() :{  Collection < TrailDTO > trails = new LinkedList < TrailDTO > ();}{  (    < TRLSO >    (      < TRLO >      {        trails.add(readTrail());      }      < TRLC >    )*    < TRLSC >  )?  < EOF >  {    return trails;  }}