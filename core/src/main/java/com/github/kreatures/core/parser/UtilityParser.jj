options {
  JDK_VERSION = "1.6";
  static = false;
}

PARSER_BEGIN(UtilityParser)
package com.github.kreatures.core.parser;
import java.util.*;
import java.io.*;
import com.github.kreatures.core.util.Pair;

@SuppressWarnings("all")

public class UtilityParser {

  public UtilityParser(String expr)
  {
    this(new StringReader(expr));
  }
}

PARSER_END(UtilityParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <TEXT_CHAR: ["A"-"Z", "a"-"z", "0"-"9", "_", "-", "."]|"_" >
| <LPARANTHESS: "(">
| <RPARANTHESS: ")">
| <LBRACE: "{" >
| <RBRACE: "}" >
| <SEMICOLON: ";" >
| <EQUAL: "=" >
| <COMMA: ",">
| <LOGIC_UNARY_SYMBOL: "!"|"-" >
| <LOGIC_BINARY_SYMBOL: "||"|"&&" >
}

String java_cls(Map<String, String > toFill) :
{
  Token token;
  String reval = "";
  List<Pair<String,String > > temp;
}
{
  (
    token = < TEXT_CHAR >
    {
      reval += token.image;
  	}
  )*
  (
    < LBRACE >
    temp = pair_list()
    {
      for(Pair<String, String > p : temp) {
        toFill.put(p.first, p.second);
      }
    }
    < RBRACE >
  )?

  {
    return reval;
  }
}

List<Pair<String, String > > pair_list() :
{
  List<Pair<String,String > > reval = new LinkedList<Pair<String, String > >();
  Pair<String, String > temp;
}
{
  temp = pair()
  {
    reval.add(temp);
  }
  (
    < SEMICOLON >
    temp = pair()
    {
      reval.add(temp);
    }
  )*

  {
    return reval;
  }
}

Pair<String, String > pair() :
{
  Token token;
  String key = "";
  String value = "";
}
{
  (
    token = < TEXT_CHAR >
    {
      key += token.image;
    }
  )*
  < EQUAL >
  (
    token = < TEXT_CHAR >
    {
      value += token.image;
    }
  )*

  {
    return new Pair<String, String >(key, value);
  }
}