options {
  JDK_VERSION = "1.6";
  static = false;
}

PARSER_BEGIN(SecretParser)
package com.github.angerona.fw.am.secrecy.parser;
import java.util.*;
import com.github.angerona.fw.am.secrecy.Secret;
import java.io.*;
import com.github.angerona.fw.parser.*;
import net.sf.tweety.logics.fol.parser.*;
import net.sf.tweety.logics.fol.syntax.*;
import com.github.angerona.fw.util.Pair;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


@SuppressWarnings("all")

public class SecretParser {

/** reference to the logback instance used for logging */
	private static Logger LOG = LoggerFactory
			.getLogger(SecretParser.class);
			
  public SecretParser(String expr)
  {
    this(new StringReader(expr));
  }

  public FolFormula delegateFOLParsing()
    throws ParseException  {
    FolFormula reval = null;
    FOLStreamAdapter a = new FOLStreamAdapter( jj_input_stream );
    FolParserBTokenManager tm = new FolParserBTokenManager(a);
    FolParserB parser = new FolParserB(tm);

	FolSignature tempSig = new FolSignature();

    try
    {
      reval = parser.formula(tempSig);
      jj_input_stream.backup(1);
      LOG.info("FOL Parser parsed: '" + reval.toString() + "'.");    }
    catch(net.sf.tweety.logics.fol.parser.ParseException e0)
    {
      ParseException e1 = new ParseException( "Error reported by FOL parser: " +
                                  e0.getMessage() );
	  throw (ParseException) e1.initCause(e0);    }
    return reval;  }

  public String delegateClsNameParsing(Map<String, String > parameters)
    throws ParseException  {
    String reval = null;
    UtilityStreamAdapter a = new UtilityStreamAdapter(jj_input_stream);
    UtilityParserTokenManager tm = new UtilityParserTokenManager(a);
    UtilityParser parser = new UtilityParser(tm);

    try    {
      reval = parser.java_cls(parameters);
	  if(parameters.isEmpty())
      	jj_input_stream.backup(1);
      LOG.info("Utility parser parsed: '" + reval + parameters + "'.");    }
    catch(com.github.angerona.fw.parser.ParseException e0)     {
      ParseException e1 = new ParseException( "Error reported by Utility parser: " +
                               e0.getMessage() );
	  throw (ParseException) e1.initCause(e0);    }
    
    return reval;  }
}

PARSER_END(SecretParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <TEXT_CHAR: ["A"-"Z", "a"-"z", "0"-"9", "_", "-", "."]|"_" >
| <LPARANTHESS: "(">
| <RPARANTHESS: ")">
| <LBRACE: "{" >| <RBRACE: "}" >| <SEMICOLON: ";" >
| <EQUAL: "=" >
| <COMMA: ",">
| <LOGIC_UNARY_SYMBOL: "!"|"-" >
| <LOGIC_BINARY_SYMBOL: "||"|"&&" >
}

/** Root production. */
Set<Secret > Input() :
{
  String agent = "";
  Token token;
  Secret temp;
  Set<Secret > reval = new HashSet<Secret >();
}
{
  (
    temp = secret()  	{
      reval.add(temp);    }
  )*
  

  {	return reval;
  }
}

Secret secret() :
{
  String name = "";
  String className = "";
  FolFormula formula = null;
  Token token;
  Map<String, String > parameters = new HashMap<String, String >();
}{
  < LPARANTHESS >
  (    token = < TEXT_CHAR >
  	{
   	  name += token.image;  	}
  )+
  < COMMA >  {
  	className = delegateClsNameParsing(parameters);
  }
  < COMMA >
  {
    formula = delegateFOLParsing();  }
  < RPARANTHESS >
  {
    return new Secret(name, formula, className, parameters);  }}

String logic_identifier() :{
  Token token;
  String reval = "";
  boolean endWithSymbol = false;
  String temp = "";}
{
  (
    token = < LOGIC_UNARY_SYMBOL >
    {
      reval += token.image;  	}  )?
  // read rest of atom  	(
  	  LOOKAHEAD(2)
  	  token = < TEXT_CHAR >
  	  {  	    reval += token.image;
  	    endWithSymbol = false;
  	  }  	)+
  	(  	  token = < LOGIC_BINARY_SYMBOL >  	  {
  	    reval += token.image;
  	    endWithSymbol = true;  	  }
  	)?
  

  {
  	if(endWithSymbol) {  	  throw new ParseException("Expression cannot end with an symbol like '||' or '&&'");
  	}
  	return reval;
 }}