options {
  JDK_VERSION = "1.6";
  static = false;
}

PARSER_BEGIN(SecretParser)
package angerona.fw.parser;
import java.util.*;
import angerona.fw.logic.Secret;
import java.io.StringReader;
@SuppressWarnings("all")

public class SecretParser {

   public SecretParser(String expr)
  {
    this(new StringReader(expr));
  }
  
  public static void main(String args []) throws ParseException
  {
   	String expr = "(Boss, java.class.irgendwas, !who_argued(husband_of(mary)))";
    System.out.println("Using expresion :" + expr);

	SecretParser parser = new SecretParser(expr);
    try
    {
   	  Secret lst = parser.secret();
   	  System.out.println("Parsing done...");
   	  System.out.println(lst.toString());
    }
    catch (Exception e)
    {
      System.out.println("NOK.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    catch (Error e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

  
}

PARSER_END(SecretParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <TEXT_CHAR: ["A"-"Z", "a"-"z", "0"-"9"]|"_" >
| <DOT: "." >
| <JAVA_CHAR: < TEXT_CHAR >|< DOT > >
| <LPARANTHESS: "(">
| <RPARANTHESS: ")">
| <COMMA: ",">
| <LOGIC_UNARY_SYMBOL: "!"|"-" >
| <LOGIC_BINARY_SYMBOL: "||"|"&&" >
}

/** Root production. */
Set<Secret > Input() :
{
  String agent = "";
  Token token;
  Secret temp;
  Set<Secret > reval = new HashSet<Secret >();
}
{
  (
    (      < COMMA >
    )?  
    temp = secret()  	{
      reval.add(temp);    }
  )+

  {	return reval;
  }
}

Secret secret() :
{
  int open = 0;
  String name = "";
  String className = "";
  String formula = "";
  String temp = "";  Token token;
}{
  < LPARANTHESS >
  {    open += 1;
  }
  (    token = < TEXT_CHAR >
  	{
   	  name += token.image;  	}
  )+
  < COMMA >
  (    token = < TEXT_CHAR >
    {      className += token.image;
  	}
	|
	token = < DOT >
	{
	  className += token.image;	} 
  )*
  < COMMA >
  (
    (      token = < LPARANTHESS >
      {
        formula += token.image;        open += 1;
      }
    )*    temp = logic_identifier()
  	{
  	  formula += temp;
  	}
  	(  	  token = < RPARANTHESS >
  	  {
  	    formula += token.image;  	    open -= 1;
  	  }
 	)*
  )+
  {
    
    System.out.println(name);
    System.out.println(className);
    if(open != 0) {		throw new ParseException(
		  open > 0 ? "missin closing )" : "missing opening (");
    }
    formula = formula.substring(0, formula.length()-1);
    System.out.println(formula);
    return new Secret(name, null);
  }}

String logic_identifier() :{
  Token token;
  String reval = "";
  boolean endWithSymbol = false;
  String temp = "";}
{
  (
    token = < LOGIC_UNARY_SYMBOL >
    {
      reval += token.image;  	}  )?
  // read rest of atom  	(
  	  token = < TEXT_CHAR >
  	  {  	    reval += token.image;
  	    endWithSymbol = false;
  	  }  	)+
  	(  	  token = < LOGIC_BINARY_SYMBOL >  	  {
  	    reval += token.image;
  	    endWithSymbol = true;  	  }
  	)?
  

  {
  	if(endWithSymbol) {  	  throw new ParseException("Expression cannot end with an symbol like '||' or '&&'");
  	}
  	return reval;
 }}