options {
  JDK_VERSION = "1.6";
  static = false;
}

PARSER_BEGIN(SecretParser)
package angerona.fw.parser;
import java.util.*;
import angerona.fw.logic.Secret;
import java.io.StringReader;
@SuppressWarnings("all")

/** Simple brace matcher. */
public class SecretParser {

   public SecretParser(String expr)
  {
    this(new StringReader(expr));
  }
  
  public static void main(String args []) throws ParseException
  {
   	String expr = "(Boss, java.class.irgendwas, {!attend})";
    System.out.println("Using expresion :" + expr);

	SecretParser parser = new SecretParser(expr);
    try
    {
   	  Secret lst = parser.secret();
   	  System.out.println("Parsing done...");
   	  System.out.println(lst.toString());
    }
    catch (Exception e)
    {
      System.out.println("NOK.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    catch (Error e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

  
}

PARSER_END(SecretParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <TEXT_CHAR: ["A"-"Z", "a"-"z", "0"-"9"] >
| <NAME: (< TEXT_CHAR >)+ >
| <DOT: "." >
| <JavaChars: < TEXT_CHAR >|< DOT > >
| <JavaID: (< JavaChars >)+ >
| <LPARANTHESS: "(">
| <RPARANTHESS: ")">
| <COMMA: ",">
|   <LBRACE: "{">
}

< IN_LOGIC > TOKEN :
{
  <RBRACE: "}">
}
< IN_LOGIC > MORE:
{
  < ~["{", "}"] >
}

/** Root production. */
Set<Secret > Input() :
{
  String agent = "";
  Token token;
  Secret temp;
  Set<Secret > reval = new HashSet<Secret >();
}
{
  (
    (      < COMMA >
    )?  
    temp = secret()  	{
      reval.add(temp);    }
  )+

  {	return reval;
  }
}

Secret secret() :
{
  String name;
  String className;
  String formula;  Token token;
}{
  < LPARANTHESS >
  token = < NAME >
  {
    name = token.image;
    System.out.println(name);  }
  < COMMA >
  token = < JavaID >
  {    className = token.image;
    System.out.println(className);
  }
  < COMMA >
  < LBRACE >
  {token_source.SwitchTo(this.IN_LOGIC);}
  token = < RBRACE >
  {
    formula = token.image.substring(0, token.image.length()-1).trim();
	System.out.println(formula);
    token_source.SwitchTo(this.DEFAULT);
  }
  < RPARANTHESS >

  {  
    return new Secret(name, null);
  }}